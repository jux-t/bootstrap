%{
// #define YY_DEBUG
#include <stdio.h>

#include "parser.h"

extern arua_bootstrap_parser_visitor arua_bsp_visitor;

static size_t indent = 0;
%}

arua
	= (indent? line ([\r\n\f]+ | &EOF))+ EOF
	{ arua_bsp_visitor.eof(); }
	;

line
	= line-comment
	| statement comment-inline?
	;

line-comment
	= comment-header
	| comment-doc
	| comment-source
	;

comment-header
	= '## ' <[^\r\n\f]*>
	{ arua_bsp_visitor.comment_header(yytext); }
	;

comment-doc
	= '#: ' <[^\r\n\f]*>
	{ arua_bsp_visitor.comment_doc(yytext); }
	;

comment-source
	=  '# ' [^\r\n\f]*
	;

comment-inline
	= ' '+ comment-source
	;

statement
	= statement-use
	;

statement-use
	= public? "use " canonical-path-match alias?
	{ arua_bsp_visitor.statement_use(); }
	;

public
	= "pub "
	{ arua_bsp_visitor.pub(); }

alias
	= " as " identifier
	{ arua_bsp_visitor.alias(); }

canonical-path
	= identifier ('.' identifier)*
	{ arua_bsp_visitor.canonical_path(); }

canonical-path-match
	= identifier-match ('.' identifier-match)*
	{ arua_bsp_visitor.canonical_path_match(); }
	;

identifier-match
	= identifier
	| '*'
	{ arua_bsp_visitor.identifier_wildcard(); }
	;

identifier
	= <[a-zA-Z_] [a-zA-Z0-9_]*>
	{ arua_bsp_visitor.identifier(yytext); }
	;

indent
	= [\r\n\f]* <'\t'*> ' '*
	{
		size_t new_indent = strlen(yytext);

		if (new_indent > indent) {
			for (size_t i = 0; i < (new_indent - indent); i++) {
				arua_bsp_visitor.indent();
			}
		} else if (new_indent < indent) {
			for (size_t i = 0; i < (indent - new_indent); i++) {
				arua_bsp_visitor.dedent();
			}
		}

		indent = new_indent;
	}
	;

EOF
	= !.
	;
%%
