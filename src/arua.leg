%{
// #define YY_DEBUG
#include <stdio.h>

#include "parser.h"

extern arua_bootstrap_parser_visitor arua_bsp_visitor;

static size_t indent = 0;
%}

arua
	= (indent? line ([\r\n\f]+ | &EOF))+ EOF
	{
		arua_bsp_visitor.eof();
	}
	;

line
	= line-comment
	| statement inline-comment?
	;

line-comment
	= header-comment
	| doc-comment
	| source-comment
	;

header-comment
	= '## ' <[^\r\n\f]*>
	{
		arua_bsp_visitor.header_comment(yytext);
	}
	;

doc-comment
	= '#: ' <[^\r\n\f]*>
	{
		arua_bsp_visitor.doc_comment(yytext);
	}
	;

source-comment
	=  '# ' [^\r\n\f]*
	;

inline-comment
	= ' '+ source-comment
	;

statement
	= use-statement
	;

use-statement
	= use-begin canonical-path-match alias?
	{
		arua_bsp_visitor.end_use();
	}
	;

use-begin
	= "use "
	{
		arua_bsp_visitor.begin_use();
	}
	;

alias
	= " as " <identifier>
	{
		arua_bsp_visitor.alias(yytext)
	}

canonical-path-match
	= match-identifier ('.' match-identifier)*
	{
		arua_bsp_visitor.end_canonical_path_match();
	}
	;

match-identifier
	= <identifier>
	{
		arua_bsp_visitor.identifier(yytext);
	}
	| '*'
	{
		arua_bsp_visitor.identifier_wildcard();
	}
	;

identifier
	= [a-zA-Z_] [a-zA-Z0-9_]*
	;

indent
	= [\r\n\f]* <'\t'*> ' '*
	{
		size_t new_indent = strlen(yytext);

		if (new_indent > indent) {
			for (size_t i = 0; i < (new_indent - indent); i++) {
				arua_bsp_visitor.indent();
			}
		} else if (new_indent < indent) {
			for (size_t i = 0; i < (indent - new_indent); i++) {
				arua_bsp_visitor.dedent();
			}
		}

		indent = new_indent;
	}
	;

EOF
	= !.
	;
%%
