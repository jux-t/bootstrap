%{
/*
	      ____    _____   __   _  ____
	     |    \  |     | |  | | ||    \
	     |     \ |     \ |  |_| ||     \
	     |__|\__\|__|\__\|______||__|\__\

	            arua bootstrap ast
	      copyright (c) 2016, josh junon
	    github.com/arua-lang/bootstrap-ast
	               mit license
*/

#define YY_DEBUG
#include <stdio.h>
#include <string.h>

#include "exception.h"
#include "parser/parser.h"

using namespace arua;
using namespace std;

static FILE *arua_bsp_file = stdin;

static Ptr<ast::Module> module;

int yyparse();

static void AruaParse() {
	while (yyparse());
}

Ptr<ast::Module> arua::ParseStdin() {
	module = Ptr<ast::Module>::make();
	arua_bsp_file = stdin;
	AruaParse();
	return module;
}

Ptr<ast::Module> arua::ParseFile(filesystem::path filepath) {
	module = Ptr<ast::Module>::make();
	FILE *file = fopen(filepath.str().c_str(), "r");
	if (file == NULL) {
		throw error << "could not open file for reading: " << filepath << " (" << strerror(errno) << ")" << endl;
	}
	arua_bsp_file = file;
	AruaParse();
	fclose(file);
	return module;
}

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size) { result = fread(buf, 1, max_size, arua_bsp_file); }

static size_t indent = 0;
%}

arua
	= (indent? line ([\r\n\f]+ | &EOF))+ EOF indent
	{ /* TODO EOF */ }
	;

line
	= line-comment
	| statement comment-inline?
	;

line-comment
	= comment-header
	| comment-doc
	| comment-source
	;

comment-header
	= '##' (' '+ <[^\r\n\f]+>)?
	{ /* TODO comment_header(yytext) */ }
	;

comment-doc
	= '#:' (' '+ <[^\r\n\f]+>)?
	{ /* TODO comment_doc(yytext) */ }
	;

comment-source
	=  '#' &[^#:] [^\r\n\f]*
	;

comment-inline
	= ' '+ comment-source
	;

statement
	= statement-use
	| statement-type
	| statement-alias
	| statement-fn
	| statement-ret
	| statement-decl-var
	| expression-r-invocation
	;

statement-use
	= public? "use " canonical-path-match alias?
	{ /* TODO statement_use() */ }
	;

statement-type
	= public? "type " type alias
	{ /* TODO statement_type() */ }
	;

statement-alias
	= public? "alias " type alias
	{ /* TODO statement_alias() */ }
	;

statement-fn
	= public? "fn " identifier '(' decl-var-list? ')' (' ' type)?
	{ /* TODO statement_fn() */ }
	;

statement-ret
	= "ret" (' ' expression-r)?
	{ /* TODO statement_ret() */ }
	;

statement-decl-var
	= decl-var (' = ' expression-r)?
	{ /* TODO statement_decl_var() */ }
	;

expression-r
	=
	( expression-r-string
	| expression-r-number
	| expression-r-invocation
	)
	{ /* TODO r_expression() */ }
	;

expression-r-number
	= number-radix
	| number
	;

expression-r-invocation
	= canonical-path '(' invocation-arguments? ')'
	{ /* TODO r_invocation() */ }
	;

expression-r-string
	= '"' <string-character*> '"'
	{ /* TODO r_string(yytext) */ }
	;

string-character
	= string-escape | [^"\\\r\n\f]
	;

string-escape
	= '\\' .
	;

invocation-arguments
	= expression-r (", " expression-r)*
	;

number
	= number-simple number-sci? number-qualifier?
	;

number-simple
	= <('+'|'-')? &([0-9] | '.' [0-9]) digits? ('.' digits?)?>
	{ /* TODO r_number(yytext) */ }
	;

number-qualifier
	= <[fui] digits>
	{ /* TODO r_number_qualifier(yytext) */ }
	;

number-sci
	= 'e' <('+'|'-')? digits>
	{ /* TODO r_number_sci(yytext) */ }
	;

number-radix
	= number-radix-prefix <digits-radix>
	{ /* TODO r_number_radix(yytext) */ }
	number-qualifier?
	;

number-radix-prefix
	= <[0-9][0-9]?> 'x'
	{ /* TODO r_number_radix_prefix(yytext) */ }
	;

decl-var-list
	= decl-var (", " decl-var)*
	;

decl-var
	= identifier ' ' type
	;

public
	= "pub "
	{ /* TODO pub() */ }
	;

alias
	= " as " identifier
	{ /* TODO alias() */ }
	;

type
	= type-basic
	| type-array
	;

type-basic
	= canonical-path type-basic-template?
	{ /* TODO type_basic() */ }
	;

type-basic-template
	= '<' type (", " type)* '>'
	{ /* TODO type_basic_template() */ }
	;

type-array
	= '[' type ']'
	{ /* TODO type_array() */ }
	;

canonical-path
	= identifier ('.' identifier)*
	{ /* TODO canonical_path() */ }
	;

canonical-path-match
	= identifier-match ('.' identifier-match)*
	{ /* TODO canonical_path_match() */ }
	;

identifier-match
	= identifier
	| '*'
	{ /* TODO identifier_wildcard() */ }
	;

identifier
	= <[a-zA-Z_] [a-zA-Z0-9_]*>
	{ /* TODO identifier(yytext) */ }
	;

digits-radix
	= [A-Z0-9]+
	;

digits
	= [0-9]+
	;
indent
	= [\r\n\f]* <'\t'*> ' '*
	{
		size_t new_indent = strlen(yytext);

		if (new_indent > indent) {
			for (size_t i = 0; i < (new_indent - indent); i++) {
				/* TODO indent() */
			}
		} else if (new_indent < indent) {
			for (size_t i = 0; i < (indent - new_indent); i++) {
				/* TODO dedent() */
			}
		}

		indent = new_indent;
	}
	;

EOF
	= !.
	;
%%
